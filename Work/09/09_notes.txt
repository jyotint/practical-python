----------------------------------------------------------------------------
09. Packages
----------------------------------------------------------------------------
https://dabeaz-course.github.io/practical-python/Notes/09_Packages/00_Overview.html

We conclude the course with a few details on how to organize your code into a 
package structure. We’ll also discuss the installation of third party packages 
and preparing to give your own code away to others.

The subject of packaging is an ever-evolving, overly complex part of Python 
development. Rather than focus on specific tools, the main focus of this 
section is on some general code organization principles that will prove useful 
no matter what tools you later use to give code away or manage dependencies.



----------------------------------------------------------------------------
9.1 Packages
--------------------------------------
If writing a larger program, you don’t really want to organize it as a large of 
collection of standalone files at the top level. This section introduces the 
concept of a package.


--------------------------------------
Modules
--------------------------------------
Any Python source file is a module.

# foo.py
def grok(a):
    ...
def spam(b):
    ...

An import statement loads and executes a module.

# program.py
import foo

a = foo.grok(2)
b = foo.spam('Hello')



--------------------------------------
Packages vs Modules
--------------------------------------
For larger collections of code, it is common to organize modules into a package.

# From this
pcost.py
report.py
fileparse.py

# To this
porty/
    __init__.py
    pcost.py
    report.py
    fileparse.py

You pick a name and make a top-level directory. porty in the example above 
(clearly picking this name is the most important first step).

Add an __init__.py file to the directory. It may be empty.

Put your source files into the directory.



--------------------------------------
Using a Package
--------------------------------------
A package serves as a namespace for imports.

This means that there are now multilevel imports.

import porty.report
port = porty.report.read_portfolio('port.csv')


There are other variations of import statements.

from porty import report
port = report.read_portfolio('portfolio.csv')

from porty.report import read_portfolio
port = read_portfolio('portfolio.csv')


Two problems
There are two main problems with this approach.
- imports between files in the same package break.
- Main scripts placed inside the package break.
So, basically everything breaks. But, other than that, it works.



--------------------------------------
Relative Imports
--------------------------------------

Instead of directly using the package name, you can use . to refer to the 
current package.

# report.py
from . import fileparse

def read_portfolio(filename):
    return fileparse.parse_csv(...)

Syntax:
from . import modname

This makes it easy to rename the package.



--------------------------------------
Problem: Main Scripts
--------------------------------------
Running a package submodule as a main script breaks.

bash $ python porty/pcost.py # BREAKS
...

Reason: You are running Python on a single file and Python doesn’t see the rest of the package structure correctly (sys.path is wrong).

All imports break. To fix this, you need to run your program in a different way, using the -m option.

bash $ python -m porty.pcost # WORKS
...


--------------------------------------
__init__.py files
--------------------------------------
The primary purpose of these files is to stitch modules together.



--------------------------------------
Application Structure
--------------------------------------
Code organization and file structure is key to the maintainability of an application.

There is no “one-size fits all” approach for Python. However, one structure that 
works for a lot of problems is something like this.

porty-app/
  README.txt
  script.py         # SCRIPT
  porty/
    # LIBRARY CODE
    __init__.py
    pcost.py
    report.py
    fileparse.py

The top-level porty-app is a container for everything else–documentation, 
top-level scripts, examples, etc.

Again, top-level scripts (if any) need to exist outside the code package. 
One level up.

#!/usr/bin/env python3
# porty-app/script.py
import sys
import porty

porty.report.main(sys.argv)


--------------------------------------

--------------------------------------



--------------------------------------

--------------------------------------



--------------------------------------

--------------------------------------




----------------------------------------------------------------------------
9.2 Third Party Modules
--------------------------------------


--------------------------------------

--------------------------------------



--------------------------------------

--------------------------------------





----------------------------------------------------------------------------
9.3 Giving your code to others
--------------------------------------


--------------------------------------

--------------------------------------



--------------------------------------

--------------------------------------




----------------------------------------------------------------------------
